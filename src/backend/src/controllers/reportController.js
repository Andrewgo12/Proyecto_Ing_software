const ReportService = require('../services/reportService');
const logger = require('../utils/logger');

class ReportController {
  async generateInventoryReport(req, res, next) {
    try {
      const { location_id, category_id, format = 'json', date_from, date_to } = req.query;
      
      const filters = {};
      if (location_id) filters.location_id = location_id;
      if (category_id) filters.category_id = category_id;
      if (date_from) filters.date_from = date_from;
      if (date_to) filters.date_to = date_to;

      const report = await ReportService.generateInventoryReport(filters, format);

      if (format === 'json') {
        res.json({
          success: true,
          data: report
        });
      } else {
        res.setHeader('Content-Type', 'application/octet-stream');
        res.setHeader('Content-Disposition', `attachment; filename=inventory-report.${format}`);
        res.send(report);
      }

      logger.info(`Inventory report generated by user ${req.user.email}`);
    } catch (error) {
      next(error);
    }
  }

  async generateMovementReport(req, res, next) {
    try {
      const { 
        product_id, 
        location_id, 
        movement_type, 
        date_from, 
        date_to, 
        format = 'json' 
      } = req.query;
      
      const filters = {};
      if (product_id) filters.product_id = product_id;
      if (location_id) filters.location_id = location_id;
      if (movement_type) filters.movement_type = movement_type;
      if (date_from) filters.date_from = date_from;
      if (date_to) filters.date_to = date_to;

      const report = await ReportService.generateMovementReport(filters, format);

      if (format === 'json') {
        res.json({
          success: true,
          data: report
        });
      } else {
        res.setHeader('Content-Type', 'application/octet-stream');
        res.setHeader('Content-Disposition', `attachment; filename=movement-report.${format}`);
        res.send(report);
      }

      logger.info(`Movement report generated by user ${req.user.email}`);
    } catch (error) {
      next(error);
    }
  }

  async generateValuationReport(req, res, next) {
    try {
      const { location_id, method = 'FIFO', format = 'json' } = req.query;
      
      const filters = { method };
      if (location_id) filters.location_id = location_id;

      const report = await ReportService.generateValuationReport(filters, format);

      if (format === 'json') {
        res.json({
          success: true,
          data: report
        });
      } else {
        res.setHeader('Content-Type', 'application/octet-stream');
        res.setHeader('Content-Disposition', `attachment; filename=valuation-report.${format}`);
        res.send(report);
      }

      logger.info(`Valuation report generated by user ${req.user.email}`);
    } catch (error) {
      next(error);
    }
  }

  async getDashboardMetrics(req, res, next) {
    try {
      const { location_id } = req.query;
      const metrics = await ReportService.getDashboardMetrics(location_id);

      res.json({
        success: true,
        data: metrics
      });
    } catch (error) {
      next(error);
    }
  }

  async getProductPerformance(req, res, next) {
    try {
      const { days = 30, limit = 10, location_id } = req.query;
      
      const performance = await ReportService.getProductPerformance({
        days: parseInt(days),
        limit: parseInt(limit),
        location_id
      });

      res.json({
        success: true,
        data: performance
      });
    } catch (error) {
      next(error);
    }
  }

  async getStockTrends(req, res, next) {
    try {
      const { product_id, location_id, days = 30 } = req.query;
      
      const trends = await ReportService.getStockTrends({
        product_id,
        location_id,
        days: parseInt(days)
      });

      res.json({
        success: true,
        data: trends
      });
    } catch (error) {
      next(error);
    }
  }
}

module.exports = new ReportController();