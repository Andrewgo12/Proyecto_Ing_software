{
  "info": {
    "name": "Sistema Inventario PYMES API",
    "description": "Colección completa de endpoints para testing del Sistema de Inventario PYMES",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api/v1",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "locationId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.refreshToken);",
                  "    pm.test('Login successful', () => {",
                  "        pm.expect(response.accessToken).to.not.be.empty;",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@empresa.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.test('Token refreshed successfully', () => {",
                  "        pm.expect(response.accessToken).to.not.be.empty;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          }
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has products array', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.json().data.length > 0) {",
                  "    pm.collectionVariables.set('productId', pm.response.json().data[0].id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Product created successfully', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('sku');",
                  "    pm.expect(response.sku).to.equal('TEST-001');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.collectionVariables.set('productId', pm.response.json().id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sku\": \"TEST-001\",\n  \"name\": \"Producto de Prueba\",\n  \"description\": \"Producto creado para testing\",\n  \"categoryId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"unitPrice\": 25000.00,\n  \"unitOfMeasure\": \"unidad\",\n  \"barcode\": \"1234567890123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          }
        },
        {
          "name": "Get Product by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product details returned', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('sku');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          }
        },
        {
          "name": "Update Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product updated successfully', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.equal('Producto Actualizado');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Producto Actualizado\",\n  \"description\": \"Descripción actualizada del producto\",\n  \"unitPrice\": 30000.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          }
        },
        {
          "name": "Search Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results returned', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?search=laptop&category=electronics",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "search",
                  "value": "laptop"
                },
                {
                  "key": "category",
                  "value": "electronics"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Inventory",
      "item": [
        {
          "name": "Get Stock Levels",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Stock levels returned', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    if (response.length > 0) {",
                  "        pm.expect(response[0]).to.have.property('quantity');",
                  "        pm.expect(response[0]).to.have.property('product');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/stock?productId={{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "stock"],
              "query": [
                {
                  "key": "productId",
                  "value": "{{productId}}"
                }
              ]
            }
          }
        },
        {
          "name": "Create Inventory Movement - IN",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Movement created successfully', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.movementType).to.equal('in');",
                  "    pm.expect(response.quantity).to.equal(50);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"locationId\": \"123e4567-e89b-12d3-a456-426614174001\",\n  \"movementType\": \"in\",\n  \"quantity\": 50,\n  \"referenceNumber\": \"PO-2024-001\",\n  \"notes\": \"Entrada inicial de inventario\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/movements",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "movements"]
            }
          }
        },
        {
          "name": "Create Inventory Movement - OUT",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Movement created successfully', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.movementType).to.equal('out');",
                  "    pm.expect(response.quantity).to.equal(10);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"locationId\": \"123e4567-e89b-12d3-a456-426614174001\",\n  \"movementType\": \"out\",\n  \"quantity\": 10,\n  \"referenceNumber\": \"SO-2024-001\",\n  \"notes\": \"Venta a cliente\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/movements",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "movements"]
            }
          }
        },
        {
          "name": "Get Movement History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Movement history returned', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    if (response.length > 0) {",
                  "        pm.expect(response[0]).to.have.property('movementType');",
                  "        pm.expect(response[0]).to.have.property('quantity');",
                  "        pm.expect(response[0]).to.have.property('createdAt');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/movements?productId={{productId}}&startDate=2024-01-01&endDate=2024-12-31",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "movements"],
              "query": [
                {
                  "key": "productId",
                  "value": "{{productId}}"
                },
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Reports",
      "item": [
        {
          "name": "Stock Summary Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Report data returned', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('totalProducts');",
                  "    pm.expect(response).to.have.property('totalValue');",
                  "    pm.expect(response).to.have.property('categories');",
                  "    pm.expect(response.categories).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/reports/stock-summary",
              "host": ["{{baseUrl}}"],
              "path": ["reports", "stock-summary"]
            }
          }
        },
        {
          "name": "Stock Summary by Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Location-specific report returned', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('totalProducts');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/reports/stock-summary?locationId={{locationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["reports", "stock-summary"],
              "query": [
                {
                  "key": "locationId",
                  "value": "{{locationId}}"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Unauthorized Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', () => {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error response format', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response).to.have.property('code');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          }
        },
        {
          "name": "Not Found Resource",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', () => {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response format', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.code).to.equal('NOT_FOUND');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["products", "00000000-0000-0000-0000-000000000000"]
            }
          }
        },
        {
          "name": "Validation Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 422', () => {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test('Validation error format', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.code).to.equal('VALIDATION_ERROR');",
                  "    pm.expect(response).to.have.property('details');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"unitPrice\": \"invalid_price\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script global",
          "console.log('Executing request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Test script global",
          "pm.test('Response time is less than 5000ms', () => {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct content-type', () => {",
          "    if (pm.response.code !== 204) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});"
        ]
      }
    }
  ]
}