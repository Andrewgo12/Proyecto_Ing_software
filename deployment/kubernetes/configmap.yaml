# ConfigMaps for Sistema de Inventario PYMES
# Application configuration and environment variables

apiVersion: v1
kind: ConfigMap
metadata:
  name: inventario-pymes-config
  namespace: inventario-pymes
  labels:
    app.kubernetes.io/name: inventario-pymes
    app.kubernetes.io/component: config
    app.kubernetes.io/version: "1.0.0"
data:
  # Application configuration
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  PORT: "3001"
  
  # Database configuration
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "inventario_pymes"
  DB_USER: "inventario_user"
  DB_SSL: "true"
  DB_POOL_MIN: "2"
  DB_POOL_MAX: "10"
  DB_TIMEOUT: "30000"
  
  # Redis configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_TIMEOUT: "5000"
  
  # JWT configuration
  JWT_EXPIRES_IN: "24h"
  JWT_REFRESH_EXPIRES_IN: "7d"
  
  # CORS configuration
  CORS_ORIGIN: "https://inventario-pymes.com,https://www.inventario-pymes.com"
  CORS_CREDENTIALS: "true"
  
  # Rate limiting
  RATE_LIMIT_WINDOW: "15"
  RATE_LIMIT_MAX: "100"
  RATE_LIMIT_SKIP_SUCCESSFUL: "true"
  
  # File upload configuration
  UPLOAD_MAX_SIZE: "10485760"  # 10MB
  UPLOAD_ALLOWED_TYPES: "image/jpeg,image/png,image/gif,application/pdf"
  
  # Email configuration
  EMAIL_HOST: "smtp.gmail.com"
  EMAIL_PORT: "587"
  EMAIL_SECURE: "false"
  EMAIL_FROM: "noreply@inventario-pymes.com"
  
  # Monitoring configuration
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
  HEALTH_CHECK_ENABLED: "true"
  
  # Security configuration
  HELMET_ENABLED: "true"
  COMPRESSION_ENABLED: "true"
  TRUST_PROXY: "true"
  SESSION_SECURE: "true"
  COOKIE_SECURE: "true"
  
  # Backup configuration
  BACKUP_ENABLED: "true"
  BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
  BACKUP_RETENTION_DAYS: "30"
  
  # Feature flags
  ENABLE_SWAGGER: "false"
  ENABLE_PLAYGROUND: "false"
  ENABLE_DEBUG_ROUTES: "false"

---
# Frontend configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: inventario-pymes-frontend-config
  namespace: inventario-pymes
  labels:
    app.kubernetes.io/name: inventario-pymes
    app.kubernetes.io/component: frontend-config
data:
  # React app configuration
  REACT_APP_API_URL: "https://api.inventario-pymes.com/api"
  REACT_APP_VERSION: "1.0.0"
  REACT_APP_ENVIRONMENT: "production"
  REACT_APP_TITLE: "Sistema de Inventario PYMES"
  REACT_APP_DESCRIPTION: "Sistema de gestión de inventario para pequeñas y medianas empresas"
  
  # Feature flags
  REACT_APP_ENABLE_PWA: "true"
  REACT_APP_ENABLE_OFFLINE: "true"
  REACT_APP_ENABLE_NOTIFICATIONS: "true"
  
  # Analytics (placeholder - replace with actual values)
  REACT_APP_ANALYTICS_ID: ""
  REACT_APP_SENTRY_DSN: ""
  
  # Theme configuration
  REACT_APP_THEME: "default"
  REACT_APP_PRIMARY_COLOR: "#2C3E50"
  REACT_APP_SECONDARY_COLOR: "#3498DB"

---
# Database configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: inventario-pymes
  labels:
    app.kubernetes.io/name: inventario-pymes
    app.kubernetes.io/component: database-config
data:
  POSTGRES_DB: "inventario_pymes"
  POSTGRES_USER: "inventario_user"
  PGDATA: "/var/lib/postgresql/data/pgdata"
  
  # PostgreSQL configuration
  postgresql.conf: |
    # Connection settings
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    
    # Checkpoint settings
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    
    # Parallel query settings
    max_worker_processes = 8
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
    max_parallel_maintenance_workers = 4
    
    # Logging settings
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 10MB
    
    # Security settings
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/server.crt'
    ssl_key_file = '/etc/ssl/private/server.key'

---
# Redis configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: inventario-pymes
  labels:
    app.kubernetes.io/name: inventario-pymes
    app.kubernetes.io/component: redis-config
data:
  redis.conf: |
    # Network settings
    bind 0.0.0.0
    port 6379
    timeout 300
    tcp-keepalive 60
    
    # General settings
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    
    # Persistence settings
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # Append only file settings
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    
    # Memory management
    maxmemory 256mb
    maxmemory-policy allkeys-lru
    
    # Security settings
    requirepass REDIS_PASSWORD_PLACEHOLDER
    
    # Client settings
    maxclients 10000

---
# Nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: inventario-pymes
  labels:
    app.kubernetes.io/name: inventario-pymes
    app.kubernetes.io/component: nginx-config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;
        
        # Performance settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 10M;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
        
        include /etc/nginx/conf.d/*.conf;
    }
    
  default.conf: |
    # Upstream servers
    upstream backend {
        server backend-service:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream frontend {
        server frontend-service:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name inventario-pymes.com www.inventario-pymes.com;
        return 301 https://$server_name$request_uri;
    }
    
    # Main server block
    server {
        listen 443 ssl http2;
        server_name inventario-pymes.com www.inventario-pymes.com;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # API routes
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://backend;
            access_log off;
        }
        
        # Static files with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }
        
        # Frontend application
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Handle client-side routing
            try_files $uri $uri/ /index.html;
        }
    }